// PdfViewer.qml - PDF Êü•ÁúãÂô®ÁªÑ‰ª∂
import QtQuick 2.15
import QtQuick.Controls 2.15
import QtQuick.Layouts 1.15
import "../styles"

Rectangle {
    id: pdfViewer

    // ‰∏ªÈ¢òÂíåÊ†∑Âºè
    ThemeManager { id: theme }
    AppStyle { id: style }

    color: theme.background

    // Â±ûÊÄß
    property string currentPdfPath: ""
    property real zoomLevel: 1.0
    property string renderedImagePath: ""
    property bool autoFitOnLoad: true  // È¶ñÊ¨°Âä†ËΩΩÊó∂Ëá™Âä®ÈÄÇÂ∫î

    // ËÆ°ÁÆóÈÄÇÂ∫îÁ™óÂè£ÁöÑÁº©ÊîæÊØî‰æã
    function calculateFitZoom() {
        if (!pdfPageImage.sourceSize.width || !pdfPageImage.sourceSize.height) {
            console.log("[PdfViewer] Êó†Ê≥ïËÆ°ÁÆóÈÄÇÂ∫îÁº©ÊîæÔºöPDFÂ∞∫ÂØ∏Êó†Êïà")
            return 1.0
        }

        // Ëé∑ÂèñÊòæÁ§∫Âå∫ÂüüÂ∞∫ÂØ∏ÔºàÂáèÂéª‰∏Ä‰∫õËæπË∑ùÔºâ
        var viewWidth = pdfScrollView.width - 40
        var viewHeight = pdfScrollView.height - 40

        // PDFÂéüÂßãÂ∞∫ÂØ∏ÔºàËÄÉËôëÂΩìÂâçzoomÔºâ
        var pdfWidth = pdfPageImage.sourceSize.width / zoomLevel
        var pdfHeight = pdfPageImage.sourceSize.height / zoomLevel

        // ËÆ°ÁÆóÂÆΩÂ∫¶ÂíåÈ´òÂ∫¶ÁöÑÁº©ÊîæÊØî‰æã
        var widthRatio = viewWidth / pdfWidth
        var heightRatio = viewHeight / pdfHeight

        // ÂèñËæÉÂ∞èÂÄºÔºåÁ°Æ‰øùÊï¥‰∏™PDFÈÉΩËÉΩÊòæÁ§∫
        var fitZoom = Math.min(widthRatio, heightRatio)

        console.log("[PdfViewer] ÈÄÇÂ∫îÁº©ÊîæËÆ°ÁÆó:")
        console.log("  - ÊòæÁ§∫Âå∫Âüü:", viewWidth, "x", viewHeight)
        console.log("  - PDFÂéüÂßãÂ∞∫ÂØ∏:", pdfWidth, "x", pdfHeight)
        console.log("  - ÂÆΩÂ∫¶ÊØî‰æã:", widthRatio)
        console.log("  - È´òÂ∫¶ÊØî‰æã:", heightRatio)
        console.log("  - ÈÄÇÂ∫îÁº©Êîæ:", fitZoom)

        return fitZoom
    }

    // ÂáΩÊï∞
    function loadChart(path) {
        console.log("==================== PdfViewer.loadChart ====================")
        console.log("[PdfViewer] Êé•Êî∂Ë∑ØÂæÑ:", path)
        console.log("[PdfViewer] Ë∑ØÂæÑÁ±ªÂûã:", typeof path)
        console.log("[PdfViewer] Ë∑ØÂæÑÈïøÂ∫¶:", path ? path.length : 0)

        currentPdfPath = path
        console.log("[PdfViewer] currentPdfPath Â∑≤ËÆæÁΩÆ:", currentPdfPath)

        zoomLevel = 1.0
        autoFitOnLoad = true  // ÈáçÁΩÆËá™Âä®ÈÄÇÂ∫îÊ†áÂøó
        console.log("[PdfViewer] zoomLevel Â∑≤ÈáçÁΩÆ‰∏∫:", zoomLevel)

        // ‰ΩøÁî® Python ÂêéÁ´ØÊ∏≤Êüì PDF
        if (path && appController && appController.pdfHandler) {
            console.log("[PdfViewer] appController Â≠òÂú®:", !!appController)
            console.log("[PdfViewer] pdfHandler Â≠òÂú®:", !!appController.pdfHandler)
            console.log("[PdfViewer] Ë∞ÉÁî® renderPdfToImageÔºåË∑ØÂæÑ:", path, "Áº©Êîæ:", zoomLevel)

            renderedImagePath = appController.pdfHandler.renderPdfToImage(path, zoomLevel)

            console.log("[PdfViewer] Ê∏≤ÊüìÂÆåÊàêÔºåÂõæÁâáË∑ØÂæÑ:", renderedImagePath)
            console.log("[PdfViewer] ÂõæÁâáË∑ØÂæÑÁ±ªÂûã:", typeof renderedImagePath)
            console.log("[PdfViewer] ÂõæÁâáË∑ØÂæÑÈïøÂ∫¶:", renderedImagePath ? renderedImagePath.length : 0)
        } else {
            console.error("[PdfViewer] Êó†Ê≥ïÊ∏≤Êüì PDF:")
            console.error("  - path:", path)
            console.error("  - appController:", !!appController)
            console.error("  - pdfHandler:", appController ? !!appController.pdfHandler : "N/A")
        }
        console.log("==========================================================")
    }

    // ÁõëÂê¨Áº©ÊîæÂèòÂåñ
    onZoomLevelChanged: {
        console.log("[PdfViewer] Áº©ÊîæÁ∫ßÂà´ÂèòÂåñ:", zoomLevel)
        if (currentPdfPath && appController && appController.pdfHandler) {
            console.log("[PdfViewer] ÈáçÊñ∞Ê∏≤Êüì PDFÔºåÁº©Êîæ:", zoomLevel)
            renderedImagePath = appController.pdfHandler.renderPdfToImage(currentPdfPath, zoomLevel)
            console.log("[PdfViewer] ÈáçÊñ∞Ê∏≤ÊüìÂÆåÊàêÔºåÂõæÁâáË∑ØÂæÑ:", renderedImagePath)
        }
    }

    ColumnLayout {
        anchors.fill: parent
        spacing: 0

        // Â∑•ÂÖ∑Ê†è
        Rectangle {
            Layout.fillWidth: true
            Layout.preferredHeight: 50
            color: theme.cardBackground

            RowLayout {
                anchors.fill: parent
                anchors.margins: style.spacingSmall
                spacing: style.spacingSmall

                Item { Layout.fillWidth: true }

                // Áº©ÊîæÊéß‰ª∂
                Button {
                    text: "üîç ÊîæÂ§ß"
                    flat: true
                    onClicked: {
                        console.log("[PdfViewer] ÁÇπÂáªÊîæÂ§ßÊåâÈíÆ")
                        zoomLevel = Math.min(5.0, zoomLevel * 1.25)
                    }
                }

                Text {
                    text: Math.round(zoomLevel * 100) + "%"
                    font.pixelSize: style.fontSizeNormal
                    color: theme.textPrimary
                    Layout.preferredWidth: 60
                    horizontalAlignment: Text.AlignHCenter
                }

                Button {
                    text: "üîç Áº©Â∞è"
                    flat: true
                    onClicked: {
                        console.log("[PdfViewer] ÁÇπÂáªÁº©Â∞èÊåâÈíÆ")
                        zoomLevel = Math.max(0.1, zoomLevel / 1.25)
                    }
                }

                Button {
                    text: "ÈÄÇÂ∫î"
                    flat: true
                    onClicked: {
                        console.log("[PdfViewer] ÁÇπÂáªÈÄÇÂ∫îÊåâÈíÆ")
                        var fitZoom = calculateFitZoom()
                        if (fitZoom > 0) {
                            zoomLevel = fitZoom
                            console.log("[PdfViewer] ËÆæÁΩÆÈÄÇÂ∫îÁº©Êîæ:", fitZoom)
                        }
                    }
                }

                Button {
                    text: "ÂéüÂßãÂ§ßÂ∞è"
                    flat: true
                    onClicked: {
                        console.log("[PdfViewer] ÁÇπÂáª1:1ÊåâÈíÆ")
                        zoomLevel = 1.0
                    }
                }

                Rectangle {
                    width: 1
                    height: parent.height * 0.6
                    color: theme.divider
                }

                // ÊóãËΩ¨ÊåâÈíÆ
                Button {
                    text: "‚Üª ÊóãËΩ¨"
                    flat: true
                    onClicked: {
                        console.log("[PdfViewer] ÁÇπÂáªÊóãËΩ¨ÊåâÈíÆ")
                        // TODO: ÂÆûÁé∞ÊóãËΩ¨ÂäüËÉΩ
                        console.log("[PdfViewer] ÊóãËΩ¨ÂäüËÉΩÂæÖÂÆûÁé∞")
                    }
                }

                Item { Layout.fillWidth: true }
            }

            // Â∫ïÈÉ®ÂàÜÈöîÁ∫ø
            Rectangle {
                anchors.bottom: parent.bottom
                width: parent.width
                height: 1
                color: theme.divider
            }
        }

        // PDF ÊòæÁ§∫Âå∫Âüü
        Rectangle {
            Layout.fillWidth: true
            Layout.fillHeight: true
            color: theme.isDark ? "#1A1A1A" : "#E0E0E0"

            ScrollView {
                id: pdfScrollView
                anchors.fill: parent
                clip: true
                contentWidth: pdfPageImage.width
                contentHeight: pdfPageImage.height

                // PDF È°µÈù¢ÊòæÁ§∫
                Item {
                    width: Math.max(pdfPageImage.width, parent.width)
                    height: Math.max(pdfPageImage.height, parent.height)

                    Image {
                        id: pdfPageImage
                        source: renderedImagePath ? "file:///" + renderedImagePath : ""
                        fillMode: Image.PreserveAspectFit
                        smooth: true
                        cache: false
                        anchors.centerIn: renderedImagePath ? parent : undefined

                        // ÂõæÁâáÂä†ËΩΩÂÆåÊàêÂêéËá™Âä®ÈÄÇÂ∫î
                        onStatusChanged: {
                            if (status === Image.Ready && autoFitOnLoad && zoomLevel === 1.0) {
                                console.log("[PdfViewer] ÂõæÁâáÂä†ËΩΩÂÆåÊàêÔºåËá™Âä®ÈÄÇÂ∫îÁ™óÂè£")
                                autoFitOnLoad = false  // Èò≤Ê≠¢ÈáçÂ§çËß¶Âèë
                                Qt.callLater(function() {
                                    var fitZoom = calculateFitZoom()
                                    if (fitZoom > 0 && fitZoom !== 1.0) {
                                        console.log("[PdfViewer] Ëá™Âä®ËÆæÁΩÆÈÄÇÂ∫îÁº©Êîæ:", fitZoom)
                                        zoomLevel = fitZoom
                                    }
                                })
                            }
                        }

                        // Âç†‰ΩçÂÜÖÂÆπÔºàPDF Êú™Âä†ËΩΩÊó∂Ôºâ
                        Column {
                            visible: !renderedImagePath
                            anchors.centerIn: parent
                            spacing: style.spacingNormal

                            Text {
                                text: "üìÑ"
                                font.pixelSize: 72
                                color: theme.textSecondary
                                anchors.horizontalCenter: parent.horizontalCenter
                            }

                            Text {
                                text: currentPdfPath || "Êú™Âä†ËΩΩ PDF"
                                font.pixelSize: style.fontSizeMedium
                                color: theme.textSecondary
                                horizontalAlignment: Text.AlignHCenter
                                wrapMode: Text.WordWrap
                                width: pdfViewer.width * 0.6
                            }

                            Text {
                                text: "Áº©Êîæ: " + Math.round(zoomLevel * 100) + "%"
                                font.pixelSize: style.fontSizeSmall
                                color: theme.textSecondary
                                anchors.horizontalCenter: parent.horizontalCenter
                            }
                        }
                    }
                }
            }
        }
    }
}
