name: Build and Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version number (e.g., 1.0.0)'
        required: true
        default: '1.0.0'

jobs:
  # 获取版本号（所有平台共用）
  get-version:
    name: Get Version
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.VERSION }}
    steps:
      - name: Get version
        id: get_version
        run: |
          if [ "${{ github.event_name }}" = "push" ]; then
            VERSION="${{ github.ref_name }}"
            VERSION="${VERSION#v}"
          else
            VERSION="${{ github.event.inputs.version }}"
          fi
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "Building version: $VERSION"

  # Windows 构建
  build-windows:
    name: Build Windows x64
    runs-on: windows-latest
    needs: get-version

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install Clang
        run: |
          choco install llvm -y
        shell: pwsh

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install nuitka ordered-set zstandard

      - name: Update version in build.py
        run: |
          $VERSION = "${{ needs.get-version.outputs.version }}"
          (Get-Content build.py) -replace 'VERSION = ".*"', "VERSION = `"$VERSION`"" | Set-Content build.py
        shell: pwsh

      - name: Build with Nuitka
        run: |
          python build.py
        shell: pwsh
        env:
          PYTHONIOENCODING: utf-8

      - name: Verify build output
        run: |
          $VERSION = "${{ needs.get-version.outputs.version }}"
          if (Test-Path "dist/EAIP_Viewer_v${VERSION}_Windows_x64.zip") {
            Write-Host "✓ Build successful"
            $size = (Get-Item "dist/EAIP_Viewer_v${VERSION}_Windows_x64.zip").Length / 1MB
            Write-Host "Package size: $([math]::Round($size, 2)) MB"
          } else {
            Write-Host "✗ Build failed: Output file not found"
            exit 1
          }
        shell: pwsh

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: EAIP_Viewer_Windows_x64
          path: dist/EAIP_Viewer_v${{ needs.get-version.outputs.version }}_Windows_x64.zip
          retention-days: 30

  # Linux Debian 系构建 (Ubuntu/Debian)
  build-linux-debian:
    name: Build Linux x64 (Debian/Ubuntu)
    runs-on: ubuntu-22.04
    needs: get-version

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            clang \
            patchelf \
            libxcb-cursor0 \
            libxcb-icccm4 \
            libxcb-image0 \
            libxcb-keysyms1 \
            libxcb-render-util0 \
            libxcb-shape0 \
            libxcb-xfixes0 \
            libxcb-xinerama0 \
            libxkbcommon-x11-0 \
            libegl1 \
            libxkbcommon0 \
            libdbus-1-3

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install nuitka ordered-set zstandard

      - name: Update version in build_linux.py
        run: |
          VERSION="${{ needs.get-version.outputs.version }}"
          sed -i "s/VERSION = \".*\"/VERSION = \"$VERSION\"/" build_linux.py

      - name: Build with Nuitka
        run: |
          python build_linux.py
        env:
          PYTHONIOENCODING: utf-8

      - name: Verify build output
        run: |
          VERSION="${{ needs.get-version.outputs.version }}"
          if [ -f "dist/EAIP_Viewer_v${VERSION}_Linux_x64_debian.tar.gz" ]; then
            echo "✓ Build successful"
            size=$(du -h "dist/EAIP_Viewer_v${VERSION}_Linux_x64_debian.tar.gz" | cut -f1)
            echo "Package size: $size"
          else
            echo "✗ Build failed: Output file not found"
            exit 1
          fi

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: EAIP_Viewer_Linux_x64_Debian
          path: dist/EAIP_Viewer_v${{ needs.get-version.outputs.version }}_Linux_x64_debian.tar.gz
          retention-days: 30

  # Linux RHEL 系构建 (Rocky Linux/CentOS)
  build-linux-rhel:
    name: Build Linux x64 (RHEL/Rocky)
    runs-on: ubuntu-latest
    needs: get-version
    container:
      image: rockylinux:9

    steps:
      - name: Install git and basic tools
        run: |
          dnf install -y git tar gzip

      - name: Checkout code
        uses: actions/checkout@v5

      - name: Install Python and system dependencies
        run: |
          dnf install -y \
            python3.11 \
            python3.11-pip \
            python3.11-devel \
            gcc \
            gcc-c++ \
            clang \
            patchelf \
            xcb-util-cursor \
            xcb-util-image \
            xcb-util-keysyms \
            xcb-util-renderutil \
            xcb-util-wm \
            libxkbcommon-x11 \
            mesa-libEGL \
            dbus-libs

      - name: Install Python dependencies
        run: |
          python3.11 -m pip install --upgrade pip
          python3.11 -m pip install -r requirements.txt
          python3.11 -m pip install nuitka ordered-set zstandard

      - name: Update version in build_linux.py
        run: |
          VERSION="${{ needs.get-version.outputs.version }}"
          sed -i "s/VERSION = \".*\"/VERSION = \"$VERSION\"/" build_linux.py
          sed -i "s/DISTRO = \"debian\"/DISTRO = \"rhel\"/" build_linux.py

      - name: Build with Nuitka
        run: |
          python3.11 build_linux.py
        env:
          PYTHONIOENCODING: utf-8

      - name: Verify build output
        run: |
          VERSION="${{ needs.get-version.outputs.version }}"
          if [ -f "dist/EAIP_Viewer_v${VERSION}_Linux_x64_rhel.tar.gz" ]; then
            echo "✓ Build successful"
            size=$(du -h "dist/EAIP_Viewer_v${VERSION}_Linux_x64_rhel.tar.gz" | cut -f1)
            echo "Package size: $size"
          else
            echo "✗ Build failed: Output file not found"
            exit 1
          fi

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: EAIP_Viewer_Linux_x64_RHEL
          path: dist/EAIP_Viewer_v${{ needs.get-version.outputs.version }}_Linux_x64_rhel.tar.gz
          retention-days: 30

  # macOS 构建
  build-macos:
    name: Build macOS (Intel + Apple Silicon)
    runs-on: macos-latest
    needs: get-version
    strategy:
      matrix:
        arch: [x86_64, arm64]

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install nuitka ordered-set zstandard

      - name: Update version in build_macos.py
        run: |
          VERSION="${{ needs.get-version.outputs.version }}"
          sed -i '' "s/VERSION = \".*\"/VERSION = \"$VERSION\"/" build_macos.py
          sed -i '' "s/ARCH = \".*\"/ARCH = \"${{ matrix.arch }}\"/" build_macos.py

      - name: Build with Nuitka
        run: |
          python build_macos.py
        env:
          PYTHONIOENCODING: utf-8

      - name: Verify build output
        run: |
          VERSION="${{ needs.get-version.outputs.version }}"
          if [ -f "dist/EAIP_Viewer_v${VERSION}_macOS_${{ matrix.arch }}.dmg" ]; then
            echo "✓ Build successful"
            size=$(du -h "dist/EAIP_Viewer_v${VERSION}_macOS_${{ matrix.arch }}.dmg" | cut -f1)
            echo "Package size: $size"
          else
            echo "✗ Build failed: Output file not found"
            exit 1
          fi

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: EAIP_Viewer_macOS_${{ matrix.arch }}
          path: dist/EAIP_Viewer_v${{ needs.get-version.outputs.version }}_macOS_${{ matrix.arch }}.dmg
          retention-days: 30

  # 创建 Release（仅在 tag 推送时）
  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [get-version, build-windows, build-linux-debian, build-linux-rhel, build-macos]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Display structure
        run: ls -R artifacts

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            artifacts/EAIP_Viewer_Windows_x64/*.zip
            artifacts/EAIP_Viewer_Linux_x64_Debian/*.tar.gz
            artifacts/EAIP_Viewer_Linux_x64_RHEL/*.tar.gz
            artifacts/EAIP_Viewer_macOS_x86_64/*.dmg
            artifacts/EAIP_Viewer_macOS_arm64/*.dmg
          draft: false
          prerelease: false
          generate_release_notes: true
          body: |
            ## EAIP Viewer v${{ needs.get-version.outputs.version }}

            ### 下载

            **Windows:**
            - Windows 10/11 x64: `EAIP_Viewer_v${{ needs.get-version.outputs.version }}_Windows_x64.zip`

            **Linux:**
            - Debian/Ubuntu x64: `EAIP_Viewer_v${{ needs.get-version.outputs.version }}_Linux_x64_debian.tar.gz`
            - RHEL/Rocky/CentOS x64: `EAIP_Viewer_v${{ needs.get-version.outputs.version }}_Linux_x64_rhel.tar.gz`

            **macOS:**
            - Intel (x86_64): `EAIP_Viewer_v${{ needs.get-version.outputs.version }}_macOS_x86_64.dmg`
            - Apple Silicon (arm64): `EAIP_Viewer_v${{ needs.get-version.outputs.version }}_macOS_arm64.dmg`

            ### 系统要求

            - **Windows**: Windows 10/11 x64
            - **Linux**: Ubuntu 20.04+, Debian 11+, Rocky Linux 9+, RHEL 9+
            - **macOS**: macOS 11 Big Sur 或更高版本

            ### 使用说明

            1. 下载对应平台的安装包
            2. 解压/安装到任意位置
            3. 运行 EAIP_Viewer 主程序
            4. 首次使用请导入 EAIP 数据

            ### 更新内容

            详见下方自动生成的变更日志

            ---
            构建时间: ${{ github.event.repository.updated_at }}
            构建工具: Nuitka + GitHub Actions
            支持平台: Windows, Linux (Debian/RHEL), macOS (Intel/Apple Silicon)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
